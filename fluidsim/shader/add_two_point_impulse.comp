#version 430 core

layout(local_size_x=1, local_size_y=1, local_size_z=1) in;

layout(rgba16_snorm)
uniform image3D field_r;

layout(rgba16_snorm) 
uniform image3D field_w;

uniform float forceMultiplier;

uniform vec3 originPoint;
uniform vec3 endPoint;

void main()
{
	vec3 direction = endPoint - originPoint;
	vec3 directionNorm = normalize(direction);
	ivec3 img_size = imageSize(field_w);

	ivec3 position = ivec3(gl_GlobalInvocationID);

	float distancePositionOrigin = length(position - originPoint);
	float max = img_size.x;
	float min = 0;
	if (max < img_size.y) {
		max = img_size.y;
	}
	if (max < img_size.z) {
		max = img_size.z;
	}
	//max = length(ivec3(0, 0, 0) - img_size);
	max = 5;
	//float decayFactor = (distancePositionOrigin - min)/(max - min) * (1 - 0) + 0; Obviously this can be simplified
	float decayFactor = 1 - (distancePositionOrigin/max);

	vec4 value = imageLoad(field_r, position);
	
	vec3 directedForce = directionNorm * forceMultiplier * decayFactor;
	value += vec4(directedForce.x, directedForce.y, directedForce.z, 0);
	
	imageStore(field_w, position, value);
}