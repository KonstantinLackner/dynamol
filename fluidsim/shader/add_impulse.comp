#version 430

layout(local_size_x=1, local_size_y=1, local_size_z=1) in;

layout(rgba16_snorm) 
uniform image3D field_r;

layout(rgba16_snorm) 
uniform image3D field_w;

uniform vec3 position;
uniform float radius;
uniform float forceMultiplier = 1.0f;
uniform vec4 force;     // This is a vec4 because it's also used to add ink/colour 

void impulse_point(ivec3 coord)
{
    vec3 diff = position - vec3(coord);
    float x = -dot(diff,diff) / radius;
    vec4 effect = force * exp(x);

    vec4 u0 = imageLoad(field_r, coord);
    vec4 summed = u0 + effect * forceMultiplier;
    imageStore(field_w, coord, summed);
}

void equal_impulse(ivec3 centreCoords)
{
    ivec3 img_size = imageSize(field_w);
    bool rightBounds = false;
    bool leftBounds = false;
    bool topBounds = false;
    bool botBounds = false;
    bool frontBounds = false;
    bool backBounds = false;

    if (centreCoords.x == 0) {
        leftBounds = true;
    } else if (centreCoords.x == img_size.x-1) {
        rightBounds = true;
    }

    // IS THIS THE RIGHT WAY ROUND?
    if (centreCoords.y == 0) {
        topBounds = true;
    } else if (centreCoords.y == img_size.y-1) {
        botBounds = true;
    }

    // AGAIN - IS THAT RIGHT?
    if (centreCoords.z == 0) {
        frontBounds = true;
    } else if (centreCoords.z == img_size.z-1) {
        backBounds = true;
    }

    /*
        CALCULATING AND ADDING FORCES TO NEIGHBOURS
    */
    if (!leftBounds) {
        vec4 oldForce = imageLoad(field_r, centreCoords + ivec3(-1, 0, 0));
        vec3 direction = (centreCoords + ivec3(-1, 0, 0)) - centreCoords;
        vec4 direction4 = vec4(direction.x, direction.y, direction.z, 0);
        vec4 summed = oldForce + direction4 * force * forceMultiplier;
    }
    
    if (!rightBounds) {
        vec4 oldForce = imageLoad(field_r, centreCoords + ivec3(1, 0, 0));
        vec3 direction = (centreCoords + ivec3(1, 0, 0)) - centreCoords;
        vec4 direction4 = vec4(direction.x, direction.y, direction.z, 0);
        vec4 summed = oldForce + direction4 * force * forceMultiplier;
    }

    // IS THIS CORRECT???
    if (!topBounds) {
        vec4 oldForce = imageLoad(field_r, centreCoords + ivec3(0, 1, 0));
        vec3 direction = (centreCoords + ivec3(0, 1, 0)) - centreCoords;
        vec4 direction4 = vec4(direction.x, direction.y, direction.z, 0);
        vec4 summed = oldForce + direction4 * force * forceMultiplier;
    }

    // IS THIS CORRECT???
    if (!botBounds) {
        vec4 oldForce = imageLoad(field_r, centreCoords + ivec3(0, -1, 0));
        vec3 direction = (centreCoords + ivec3(0, -1, 0)) - centreCoords;
        vec4 direction4 = vec4(direction.x, direction.y, direction.z, 0);
        vec4 summed = oldForce + direction4 * force * forceMultiplier;
    }

    if (!frontBounds) {
        vec4 oldForce = imageLoad(field_r, centreCoords + ivec3(0, 0, -1));
        vec3 direction = (centreCoords + ivec3(0, 0, -1)) - centreCoords;
        vec4 direction4 = vec4(direction.x, direction.y, direction.z, 0);
        vec4 summed = oldForce + direction4 * force * forceMultiplier;
    }

    if (!backBounds) {
        vec4 oldForce = imageLoad(field_r, centreCoords + ivec3(0, 0, 1));
        vec3 direction = (centreCoords + ivec3(0, 0, 1)) - centreCoords;
        vec4 direction4 = vec4(direction.x, direction.y, direction.z, 0);
        vec4 summed = oldForce + direction4 * force * forceMultiplier;
    }
}

void main()
{
    ivec3 coord = ivec3(gl_GlobalInvocationID);
    //impulse_point(coord);
    equal_impulse(coord);
}